{"ts":1353151088349,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Module dependencies.\n */\nvar BinaryParser = require('./binary_parser').BinaryParser;\n\n/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp(\"^[0-9a-fA-F]{24}$\");\n\n/**\n* Create a new ObjectID instance\n*\n* @class Represents the BSON ObjectID type\n* @param {String|Number} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @return {Object} instance of ObjectID.\n*/\nvar ObjectID = function ObjectID(id, _hex) {\n  if(!(this instanceof ObjectID)) return new ObjectID(id, _hex);\n\n  this._bsontype = 'ObjectID';\n  var __id = null;\n\n  // Throw an error if it's not a valid setup\n  if(id != null && 'number' != typeof id && (id.length != 12 && id.length != 24))\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n\n  // Generate id based on the input\n  if(id == null || typeof id == 'number') {\n    // convert to 12 byte binary string\n    this.id = this.generate(id);\n  } else if(id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if(checkForHexRegExp.test(id)) {\n    return ObjectID.createFromHexString(id);\n  } else if(!checkForHexRegExp.test(id)) {\n    throw new Error(\"Value passed in is not a valid 24 character hex string\");\n  }\n\n  if(ObjectID.cacheHexString) this.__id = this.toHexString();\n};\n\n// Allow usage of ObjectId aswell as ObjectID\nvar ObjectId = ObjectID;\n\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @return {String} return the 24 byte hex string representation.\n* @api public\n*/\nObjectID.prototype.toHexString = function() {\n  if(ObjectID.cacheHexString && this.__id) return this.__id;\n\n  var hexString = ''\n    , number\n    , value;\n\n  for (var index = 0, len = this.id.length; index < len; index++) {\n    value = BinaryParser.toByte(this.id[index]);\n    number = value <= 15\n      ? '0' + value.toString(16)\n      : value.toString(16);\n    hexString = hexString + number;\n  }\n\n  if(ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @return {Number} returns next index value.\n* @api private\n*/\nObjectID.prototype.get_inc = function() {\n  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @return {Number} returns next index value.\n* @api private\n*/\nObjectID.prototype.getInc = function() {\n  return this.get_inc();\n};\n\n/**\n* Generate a 12 byte id string used in ObjectID's\n*\n* @param {Number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {String} return the 12 byte id binary string.\n* @api private\n*/\nObjectID.prototype.generate = function(time) {\n  if ('number' == typeof time) {\n    var time4Bytes = BinaryParser.encodeInt(time, 32, true, true);\n    /* for time-based ObjectID the bytes following the time will be zeroed */\n    var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);\n    var pid2Bytes = BinaryParser.fromShort(typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid);\n    var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);\n  } else {\n  \tvar unixTime = parseInt(Date.now()/1000,10);\n    var time4Bytes = BinaryParser.encodeInt(unixTime, 32, true, true);\n    var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);\n    var pid2Bytes = BinaryParser.fromShort(typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid);\n    var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);\n  }\n\n  return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;\n};\n\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @return {String} return the 24 byte hex string representation.\n* @api private\n*/\nObjectID.prototype.toString = function() {\n  return this.toHexString();\n};\n\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @api private\n*/\nObjectID.prototype.inspect = ObjectID.prototype.toString;\n\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @api private\n*/\nObjectID.prototype.toJSON = function() {\n  return this.toHexString();\n};\n\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @param {Object} otherID ObjectID instance to compare against.\n* @return {Bool} the result of comparing two ObjectID's\n* @api public\n*/\nObjectID.prototype.equals = function equals (otherID) {\n  var id = (otherID instanceof ObjectID || otherID.toHexString)\n    ? otherID.id\n    : ObjectID.createFromHexString(otherID).id;\n\n  return this.id === id;\n}\n\n/**\n* Returns the generation time in seconds that this ID was generated.\n*\n* @return {Number} return number of seconds in the timestamp part of the 12 byte id.\n* @api public\n*/\nObjectID.prototype.getTimestamp = function() {\n  var timestamp = new Date();\n  timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true)) * 1000);\n  return timestamp;\n}\n\n/**\n* @ignore\n* @api private\n*/\nObjectID.index = 0;\n\nObjectID.createPk = function createPk () {\n  return new ObjectID();\n};\n\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @param {Number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n* @api public\n*/\nObjectID.createFromTime = function createFromTime (time) {\n  var id = BinaryParser.encodeInt(time, 32, true, true) +\n           BinaryParser.encodeInt(0, 64, true, true);\n  return new ObjectID(id);\n};\n\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n* @api public\n*/\nObjectID.createFromHexString = function createFromHexString (hexString) {\n  // Throw an error if it's not a valid setup\n  if(typeof hexString === 'undefined' || hexString != null && hexString.length != 24)\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n\n  var len = hexString.length;\n\n  if(len > 12*2) {\n    throw new Error('Id cannot be longer than 12 bytes');\n  }\n\n  var result = ''\n    , string\n    , number;\n\n  for (var index = 0; index < len; index += 2) {\n    string = hexString.substr(index, 2);\n    number = parseInt(string, 16);\n    result += BinaryParser.fromByte(number);\n  }\n\n  return new ObjectID(result, hexString);\n};\n\n/**\n* @ignore\n*/\nObject.defineProperty(ObjectID.prototype, \"generationTime\", {\n   enumerable: true\n , get: function () {\n     return Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true));\n   }\n , set: function (value) {\n     var value = BinaryParser.encodeInt(value, 32, true, true);\n     this.id = value + this.id.substr(4);\n     // delete this.__id;\n     this.toHexString();\n   }\n});\n\n/**\n * Expose.\n */\nexports.ObjectID = ObjectID;\nexports.ObjectId = ObjectID;"]],"start1":0,"start2":0,"length1":0,"length2":7421}]],"length":7421}
