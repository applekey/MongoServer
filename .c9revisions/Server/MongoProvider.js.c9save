{"ts":1352952238708,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var mongodb = require('mongodb');\nvar Db = require('mongodb').Db;\nvar Connection = require('mongodb').Connection;\nvar Server = require('mongodb').Server;\nvar BSON = require('mongodb').BSON;\nvar ObjectID = require('mongodb').ObjectID;\nvar MongoConnector = require('./MongoConnector').MongoConnector;\n\n\n// PUBLIC METHODS\nDataProvider = function(host, port) {\n    //    this.db = new Db('applekeyTest', new Server('alex.mongohq.com', 10041, {\n    //        auto_reconnect: true\n    //    }), {});\n    this.db = MongoConnector.GetConnection(host, port);\n}\n\nDataProvider.prototype.find = function(collectionId, findargs, callback) {\n\n    var thatdb = this.db;\n    Open(thatdb, function(error) {\n        if (error) {\n            //thatdb.close();\n            callback(error);\n            return;\n        }\n        var collection = new mongodb.Collection(thatdb, collectionId);\n        collection.find(findargs).toArray(function(err, docs) {\n            if (error) {\n                //thatdb.close();\n                callback(err);\n            }\n            else\n            {\n             thatdb.close();\n             callback(null,docs);\n            }\n        });\n    })\n}\n\n\n\n\nDataProvider.prototype.findAll = function(collectionId, callback) {\n\n    var thatdb = this.db;\n    Open(thatdb, function(error) {\n        if (error) {\n            //thatdb.close();\n            callback(error);\n            return;\n        }\n        var collection = new mongodb.Collection(thatdb, collectionId);\n        collection.find({}, {\n            limit: 10\n        }).toArray(function(err, docs) {\n            if (error) {\n                //thatdb.close();\n                callback(err);\n                return;\n            }\n            console.dir(docs);\n            //thatdb.close();\n            callback(null, docs);\n        });\n    });\n};\n\n\nDataProvider.prototype.save = function(collectionId, item, callback) {\n    var thatdb = this.db;\n    Open(thatdb, function(error) {\n        if (error) {\n            //thatdb.close();\n            callback(error);\n            return;\n        }\n        var collection = new mongodb.Collection(thatdb, collectionId);\n        collection.insert(item, null, function(error) {\n            if (error) {\n                //thatdb.close();\n                callback(error);\n                return;\n            }\n            else {\n                thatdb.close();\n                callback(null);\n            }\n        });\n    });\n}\n\nDataProvider.prototype.deleteall = function(collectionId, callback) {\n    var thatdb = this.db;\n    Open(thatdb, function(error) {\n        if (error) {\n            //thatdb.close();\n            callback(error);\n            return;\n        }\n\n        var collection = new mongodb.Collection(thatdb, collectionId);\n        collection.remove(function(error) {\n            if (error) {\n                //thatdb.close();\n                callback(error);\n            }\n            else {\n                //thatdb.close();\n                callback(null, 'removedall')\n            };\n\n        });\n\n    });\n}\n// PRIVATE METHODS\n// TODO MAKE THESE ACTUALLY PRIVATE\n\nvar Open = function(mdb, callback) {\n\n    if (IsOpen(mdb)) {\n        callback(null);\n        return;\n    }\n    mdb.open(function(err, client) {\n        if (err) {\n            callback(err);\n            return;\n        }\n\n        mdb.authenticate('applekey', 'poppy222', function(err) {\n            if (err) callback('couldnt authemticate');\n            else callback(null);\n        });\n    });\n}\n\nvar IsOpen = function(mdb) {\n    if (mdb._state === 'connected') return true;\n    else return false;\n}\n\nexports.DataProvider = DataProvider;\n"]],"start1":0,"start2":0,"length1":0,"length2":3637}]],"length":3637}
{"contributors":[],"silentsave":false,"ts":1352953453418,"patch":[[{"diffs":[[0,"pen(mdb)) {\n"],[1,"        console.log('openingdb');\n"],[0,"        call"]],"start1":3148,"start2":3148,"length1":24,"length2":58}]],"length":3671,"saved":false}
{"ts":1352953493426,"patch":[[{"diffs":[[0,"    "],[-1,"console.log('openingdb');"],[0,"\n   "]],"start1":3164,"start2":3164,"length1":33,"length2":8},{"diffs":[[0,"turn;\n    }\n"],[1,"    console.log('openingdb');\n    \n"],[0,"    mdb.open"]],"start1":3203,"start2":3203,"length1":24,"length2":59}]],"length":3681,"saved":false}
{"ts":1352953582717,"patch":[[{"diffs":[[0," {\n             "],[1,"//"],[0,"thatdb.close();\n"]],"start1":1067,"start2":1067,"length1":32,"length2":34}]],"length":3683,"saved":false}
{"ts":1352953605846,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"thatdb.c"]],"start1":2352,"start2":2352,"length1":16,"length2":18}]],"length":3685,"saved":false}
{"ts":1352953630748,"patch":[[{"diffs":[[0,") {\n        "],[1,"console.log('db is open');"],[0,"\n        cal"]],"start1":3160,"start2":3160,"length1":24,"length2":50}]],"length":3711,"saved":false}
